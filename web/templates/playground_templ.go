// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.898
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func playground() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"container-fluid vh-100 d-flex justify-content-center align-items-center\"><div class=\"row\"><div class=\"col-12 d-flex justify-content-center flex-column align-items-center\"><div id=\"textDisplay\" class=\"mb-3 text-center\" style=\"width: 80%; height: 50px; overflow: hidden; white-space: nowrap;\"><span id=\"pastText\" style=\"color: #6c757d;\"></span> <span id=\"currentText\" style=\"font-weight: bold;\"></span> <span id=\"futureText\"></span></div><input type=\"text\" class=\"form-control w-100\" style=\"width: 30%;\" id=\"typingInput\" placeholder=\"Start typing...\"></div></div></div><script>\n        document.addEventListener('DOMContentLoaded', function() {\n            const inputField = document.getElementById('typingInput');\n            const pastTextElement = document.getElementById('pastText');\n            const currentTextElement = document.getElementById('currentText');\n            const futureTextElement = document.getElementById('futureText');\n            let placeholderRemoved = false;\n            \n            // Sample text - you can replace this with your dictionary later\n            const sampleText = \"The quick brown fox jumps over the lazy dog. Programming is the process of creating a set of instructions that tell a computer how to perform a task. Creative thinking is the ability to consider something in a new way. Innovation distinguishes between a leader and a follower. Education is the most powerful weapon which you can use to change the world.\";\n            \n            const words = sampleText.split(' ');\n            const visibleWordCount = 10;\n            let currentWordIndex = 0;\n            \n            // Initial display setup\n            updateTextDisplay();\n            \n            function updateTextDisplay() {\n                // Past text (typed words)\n                pastTextElement.textContent = words.slice(0, currentWordIndex).join(' ') + ' ';\n                \n                // Current word (word to type now)\n                currentTextElement.textContent = words[currentWordIndex] || '';\n                \n                // Future text (upcoming words)\n                const futureWords = words.slice(currentWordIndex + 1, currentWordIndex + visibleWordCount);\n                futureTextElement.textContent = ' ' + futureWords.join(' ');\n            }\n            \n            inputField.addEventListener('keydown', function(event) {\n                // Check if the pressed key is a space (keyCode 32)\n                if (event.key === ' ' || event.keyCode === 32) {\n                    event.preventDefault(); // Prevent the default space behavior\n                    \n                    // Check if the typed word matches the current word\n                    const typedWord = this.value.trim();\n                    const currentWord = words[currentWordIndex];\n                    \n                    if (typedWord === currentWord) {\n                        // Move to next word\n                        currentWordIndex++;\n                        updateTextDisplay();\n                    }\n                    \n                    this.value = ''; // Clear the input field\n                    \n                    // Remove placeholder after first space if not already removed\n                    if (!placeholderRemoved) {\n                        this.placeholder = '';\n                        placeholderRemoved = true;\n                    }\n                }\n            });\n        });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func Playground() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = Base(playground()).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
